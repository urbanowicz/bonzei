//
//  ClockFaceV3.swift
//  bonzei.app
//
//  Created by Tomasz Urbanowicz on 05/06/2020.
//  Copyright Â© 2020 Zei Technologies. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import UIKit

public class ClockFaceV3 : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawCanvas1(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 329, height: 256), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 329, height: 256), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 329, y: resizedFrame.height / 256)


        //// Color Declarations
        let gradientColor5 = UIColor(red: 1.000, green: 0.067, blue: 0.000, alpha: 1.000)
        let gradientColor6 = UIColor(red: 0.961, green: 0.529, blue: 0.427, alpha: 1.000)
        let fillColor = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 0.304)

        //// Gradient Declarations
        let linearGradient7 = CGGradient(colorsSpace: nil, colors: [gradientColor5.cgColor, gradientColor6.cgColor] as CFArray, locations: [0, 1])!

        //// ðŸ’Ž-UI-Designs
        //// Wake-up:-Alarm-ringing-v2
        //// BG1
        context.saveGState()
        context.setAlpha(0.7)
        context.beginTransparencyLayer(auxiliaryInfo: nil)


        context.endTransparencyLayer()
        context.restoreGState()

        //// Time
        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 57, y: 21, width: 215, height: 215), cornerRadius: 107.5)
        fillColor.setFill()
        rectangle2Path.fill()
        
        context.restoreGState()

    }




    @objc(ClockFaceAndDotsResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
